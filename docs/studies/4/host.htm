<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<style>
iframe.test-document { border : 1px solid silver ; width : 100% }
div.test-summary { line-height:20px; margin-bottom:20px}
div.test-summary p {tab-size:100px ; white-space:pre ; margin-top : 0px ; margin-bottom : 0px ; margin-left : 20px }
div.test-summary > p { margin-top : 2px ; margin-bottom : 2px ; margin-left : 0px }
p.test-item { margin-top : 0px ; margin-bottom : 0px }
</style>

<script>
	window.Modules = Promise.all([import("./js-test.js"), import("./calculator.js")])
	.then (( [Test, Calculator] = [modules] ) => {
	window.Test = Test;
	window.Calculator = Calculator;
	});
	</script>

<script>{
	const script = document.currentScript ;
	window.Modules.then ( args => {
		console.log( script );
		console.log( Test );
		console.log( Calculator );
		} ) ; }
	</script>

<title>Test Architecture</title></head><body>

<h1>Study 4 Implementing Test Function</h1>

<p>Test modules and the test support library are imported in a SCRIPT:</p>

<pre>
&lt;script&gt;
	window.Modules = Promise.all ( [
		import("./js-test.js"),  <cc>// The test support library</cc>
		import("./calculator.js")  <cc>// The module to be tested</cc>
		] ) 
	.then (( [Test, Calculator] = [modules] ) => {
	<cc>// Save module references in the global namespace (window)</cc>
	window.Test = Test;
	window.Calculator = Calculator;
	});
	&lt;/script&gt;
	</pre>

<p>The <tt>import()</tt> function returns a <tt>Promise</tt> that fulfills when the requested module has been loaded. <tt>Promise.all()</tt> returns another promise that ensures that all requested modules are loaded successfully. The result is assigned to the <tt>Modules</tt> member of the <tt>window</tt>, which is the global scope.</p>

<p>Then we can write test scripts which register (one or more) test scripts with <tt>window.Module</tt>:</p>

<pre>
&lt;script&gt;
<cc>// Save a reference to the current script in the global namespace</cc>
{
const script = document.currentScript ;
<cc>// Register the test function for later execution</cc>
window.Modules.then ( ( ) => {
	<cc>// This is the actual test script</cc>
	Test.check( script, "calculator.add(1,2,3)===6", Calculator.add(1,2,3)===6  );
	Test.check( script, "calculator.add(1,2,-3)===0", Calculator.add(1,2,-3)===0 );
	Test.check( script, "calculator.add(1,-2,-3)===-4", Calculator.add(1,-2,-3)===-4  );
	} ) ;
	}
	&lt;/script&gt;
	</pre>

<p>Because <tt>window.Modules</tt> does not fulfill before all requested modules have been loaded, the test script execution is delayed appropriately so that it can access all the modules it needs for the job.</p>

<p>Note that the entire code is embedded in a pair of curly braces {}, which provide a scope block. This is essential because the <tt>script</tt> variable must not be overwritten by another SCRIPT following further down. <tt>document.currentScript</tt> is null when referenced from within the function passed to <tt>then()</tt>, so declaring the script variabe in the block scope is essential.</p>

<p>This <tt>script</tt> variable is referenced from the first argument to the <tt>check</tt> function, which is provided by our test support library. Inside the <tt>check</tt> function, the <tt>script</tt> reference is used to inject HTML code into the document at the appropriate location.</p>
	
<p>There is a demonstration:</p>

<h2>Testing the Calculator Module</h2>

<p>First test script checks the <tt>Calculator.add</tt> function.</p>

<script>
{
const script = document.currentScript ;
window.Modules.then ( ( ) => {
	Test.check( script, "calculator.add(1,2,3)===6", Calculator.add(1,2,3)===6  );
	Test.check( script, "calculator.add(1,2,-3)===0", Calculator.add(1,2,-3)===0 );
	Test.check( script, "calculator.add(1,-2,-3)===-4", Calculator.add(1,-2,-3)===-4  );
	} ) ; }
	</script>

<p>Here we have some text above the next test script:</p>

<script>
{
const script = document.currentScript ;
window.Modules.then ( ( ) => {
	Test.check( script, "calculator.add(1,2,3)===5", Calculator.add(1,2,3)===5  );
	Test.check( script, "calculator.add(1,2,-3)===1", Calculator.add(1,2,-3)===1 );
	Test.check( script, "calculator.add(1,-2,-3)===-3", Calculator.add(1,-2,-3)===-3  );
	} ) ; }
	</script>

</body>
</html>
